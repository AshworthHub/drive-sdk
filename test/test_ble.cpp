#include <gtest/gtest.h>
#include "ble-advertisement.h"

static uint8_t adv0_scan[] = { 0x02, 0x01, 0x06, 0x11, 0x07, 0xF4, 0x8D, 0x4D, 0x9C, 0xD8, 0x0B, 0x81, 0x83, 0x7E, 0x40, 0x86, 0x61, 0xEF, 0xBE, 0x15, 0xBE, 0x09, 0xFF, 0xBE, 0xEF, 0x00, 0x01, 0x00, 0xE0, 0x0A, 0xA3 };

static uint8_t adv1_scan[] = { 0x13, 0x09, 0x50, 0x20, 0x21, 0x01, 0x20, 0x20, 0x5A, 0x39, 0x41, 0x41, 0x33, 0x20, 0x54, 0x4F, 0x4D, 0x4D, 0x59, 0x00, 0x02, 0x0A, 0x00 };

class TestBLE : public testing::Test
{
    void SetUp() {
    }

    void TearDown(){}
};

TEST_F(TestBLE, example_test) {
    ASSERT_EQ(2, 2);
}

TEST_F(TestBLE, ble_parse_advertisement_gtest_test) {
    int a = 3;
    int b = 4;
    int r = gtest_test(a, b);
    ASSERT_EQ(r, 7);
}

TEST_F(TestBLE, ble_adv_parse_scan_record_count) {
    size_t count = 0;
    int err = 0;

    err = ble_adv_parse_scan(adv0, sizeof(adv0), &count, NULL);
    ASSERT_EQ(err, 0);
    ASSERT_EQ(count, 3); 

    err = ble_adv_parse_scan(adv1, sizeof(adv1), &count, NULL);
    ASSERT_EQ(err, 0);
    ASSERT_EQ(count, 2);
}
